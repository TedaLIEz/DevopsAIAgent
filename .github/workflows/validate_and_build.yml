name: Validation and Deployment

on: 
  push:
    branches:
      - main

jobs:

  validate-python-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Validate Python files
        run: |
          python -m compileall src

  validate-and-deployment:
    runs-on: ubuntu-latest
    needs: validate-python-files
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_USE_OIDC: true
      ARM_ACCOUNT_KEY: ${{ secrets.ARM_ACCOUNT_KEY }}
    permissions:
      contents: write
      id-token: write    # Necessary for actions/deploy-pages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v3
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: Initialize Terraform
        working-directory: ./.devops/azure
        run: terraform init
      - name: Terraform Validate
        working-directory: ./.devops/azure
        run: |
          terraform validate
      - name: Terraform Plan
        working-directory: ./.devops/azure
        run: |
          terraform plan
      - name: Deploy to Azure
        working-directory: ./.devops/azure
        run: |
          terraform apply -auto-approve

  build-and-publish:
    runs-on: ubuntu-latest
    needs: validate-and-deployment
    permissions:
      contents: write
      id-token: write    # Necessary for actions/deploy-pages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: 'Login via Azure CLI'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: 'Docker Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Set up env
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          LLM_ENDPOINT: ${{ secrets.LLM_ENDPOINT }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
          EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
          APP_ID: ${{ secrets.APP_ID }}
        run: |
          mkdir -p data
          touch .env
          echo "ENDPOINT=$LLM_ENDPOINT" > .env
          echo "API_KEY=$LLM_API_KEY" >> .env
          echo "LLM_MODEL=$LLM_MODEL" >> .env
          echo "EMBEDDING_MODEL=$EMBEDDING_MODEL" >> .env
          echo "APP_ID=$APP_ID" >> .env
          echo "PRIVATE_KEY=/code/private-key.pem" >> .env
          printf "%s" "$PRIVATE_KEY" > ./data/private_key.pem
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/devops_ai_agent:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/devops_ai_agent:${{ github.sha }}



  